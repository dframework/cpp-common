Android Project 에서 OpenSSL 사용하기

IT/Android 2010/12/14 16:45

Android에서 Crypto 관련 기능은 JCA/JCE를 사용하면 되지만 이 것의 문제는 겁나게 느리다는거... Native에서 OpenSSL을 사용하려면 NDK를 사용해서 JNI로 연결하면 되는데, OpenSSL 포팅이 과연 만만한 것인가가 문제다. Android가 그냥 Linux도 아니고, 고민하던차에 역시 모든 해답은 구글신에게~ [fries Android external OpenSSL]

'친절도 하셔라...'라고 생각했으나 예전의 OpenSSL on iOS보다는 친절하진 않구나. -_-;; 이것 저것 삽질을 해봅시다 그려... 우선 Android NDK를 설치해야한다. [Android NDK 설치 페이지] NDK 설치 디렉토리의 ./docs/OVERVIEW.TXT, ANDROID-MK.TXT 파일만 잘 읽어봐도 NDK의 대략적인 감을 잡는데 문제는 없을(?) 것이다. NDK/JNI 설명을 여기서 할 수는 없으니 Pass~!

어차피 OpenSSL을 이용한 Native Library를 구현해야하기에 dynamic library는 필요없고 static library를 빌드하기로 한다. (사실 dynamic library 빌드는 별 수정할 게 없이 common_C_INCLUDES 만 손봐주고 그냥 빌드하면 됨.)

1. 우선 빌드의 편의를 위해 다운로드받은 fries-android-external-openssl-15f48b2.tar을 풀고, 작업 디렉토리를 아래와 같이 jni로 수정한다. 여기선 임의로 fries-android-external-openssl라는 디렉토리를 만들어서 작업한다. 이 곳이 기본 workspace다. (README.1.android 파일 기준으로 설명)


./fries-android-external-openssl/fries-android-external-openssl-15f48b2/README.1.android
TO

./fries-android-external-openssl/jni/README.1.android


2. 작업 디렉토리에 AndroidManifest.xml 을 생성한다. 다른건 다 필요없고 android:minSdkVersion 설정이 제일 중요함. ./fries-android-external-openssl/AndroidManifest.xml 에 들어갈 내용은 아래와 같다.


<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
      package="com.xxx.mobile"
      android:versionCode="1"
      android:versionName="1.0">
...
<uses-sdk android:minSdkVersion="4" />
</manifest> 


3. make 파일들을 수정해야 한다. 수정해야 할 make 파일은 총 3개이다.

./fries-android-external-openssl/jni/crypto/Android.mk

./fries-android-external-openssl/jni/apps/Android.mk

./fries-android-external-openssl/jni/ssl/Android.mk


4. 우선 crypto의 make 파일을 아래와 같이 수정한다.


common_C_INCLUDES += \
	$(LOCAL_PATH)/.. \

	$(LOCAL_PATH)/../include \


# common_SHARED_LIBRARIES += libengines

#ifneq ($(TARGET_SIMULATOR),true)

#	common_SHARED_LIBRARIES += libdl

#endif


# static library

# =====================================================

include $(CLEAR_VARS)

LOCAL_CFLAGS:= $(common_CFLAGS)

LOCAL_SRC_FILES:= $(common_SRC_FILES)

include $(LOCAL_PATH)/../android-config.mk

LOCAL_C_INCLUDES:= $(common_C_INCLUDES)

LOCAL_LDLIBS += -ldl

LOCAL_MODULE:= libcrypto-static

include $(BUILD_STATIC_LIBRARY)


#dynamic library 이하 모두 삭제


5. ssl 디렉토리의 Android.mk를 아래와 같이 수정하자. 


common_C_INCLUDES += \
	$(LOCAL_PATH)/.. \

	$(LOCAL_PATH)/../include \

	$(LOCAL_PATH)/../crypto


# static library

# =====================================================

include $(CLEAR_VARS)

LOCAL_SRC_FILES:= $(common_SRC_FILES)

include $(LOCAL_PATH)/../android-config.mk

LOCAL_C_INCLUDES:= $(common_C_INCLUDES)

#LOCAL_PRELINK_MODULE:= false

LOCAL_STATIC_LIBRARIES += libcrypto-static

LOCAL_MODULE:= libssl-static

include $(BUILD_STATIC_LIBRARY)


#dynamic library 이하 모두 삭제


6. 마지막으로 apps 디렉토리의 Android.mk를 수정한다.


LOCAL_SHARED_LIBRARIES := \
	libssl \

	libcrypto 

TO

LOCAL_STATIC_LIBRARIES := \

	libssl-static \

	libcrypto-static 


common_C_INCLUDES += \

	external/openssl \

	external/openssl/include \

TO

common_C_INCLUDES += \

	$(LOCAL_PATH)/.. \

	$(LOCAL_PATH)/../include \



7. 모든 작업이 완료되었다!! 작업 디렉토리에서 (jni 디렉토리 아님) ndk-build 만 쳐주면 끝! ndk-r4 들어 별 다른 설정이 필요 없다. 정말 편해졌구나~

[fries-android-external-openssl/] $ /AndroidDeveloper/android-ndk-r4b/ndk-build


8. ./fries-android-external-openssl/obj/local/armeabi 에 이쁘게 놓인 static library들을 확인할 수 있을 것이다. 당신의 Android Native Library를 빌드할 때, make 파일에 다음을 추가하면 당신의 JNI 모듈에서 OpenSSL을 사용 할 수 있다. :-)

LOCAL_STATIC_LIBRARIES := libcrypto-static
LOCAL_LDLIBS += -ldl

